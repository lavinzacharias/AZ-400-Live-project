name: Terraform Plan

on:
  push:
    branches:
      - main

permissions:
    id-token: write
    contents: read

env:
    REGISTRY_NAME: lavinacr
    CLUSTER_NAME: example-aks-cluster
    CLUSTER_RESOURCE_GROUP: deploy-first-containerapp-rg
    NAMESPACE: mygradez

jobs:
  build:
    runs-on: ubuntu-latest
    environment: dev
    steps:

      - uses: actions/checkout@master

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "1.5.0"

# log into Azure using the service principal credential

      - name: 'Login to Azure'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          client-secret: ${{secrets.AZURE_CLIENT_SECRET}}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }} 

# Connect to azure Container Registry 

      - uses: azure/docker-login@v1
        with:
          login-server: ${{env.REGISTRY_NAME}}.azurecr.io
          username: ${{secrets.REGISTRY_USERNAME}}
          password: ${{secrets.REGISTRY_PASSWORD}}

# Container build and push to ACR

      - run:  |
          docker build . -t ${{env.REGISTRY_NAME}}.azurecr.io/mygradezimage:${{github.sha}}
          docker push ${{env.REGISTRY_NAME}}.azurecr.io/mygradezimage:${{github.sha}}

# Set environment variables for the teraaform

      - name: Set environment variables for Terraform
        run: |
          echo "ARM_CLIENT_ID=${{secrets.AZURE_CLIENT_ID}}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{secrets.AZURE_CLIENT_SECRET}}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{secrets.AZURE_TENANT_ID}}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{secrets.AZURE_SUBSCRIPTION_ID}}" >> $GITHUB_ENV

    
      - name: "Terraform Init"
        id: init
        run: terraform init
        working-directory: aks-terraform

      
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

      - name: "Terraform Plan"
        id: plan
        run: terraform plan -no-color -lock=false
        working-directory: aks-terraform
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
 
      - name: "Terraform Apply"
        id: apply
        run: terraform plan -no color -lock=false
        working-directory: aks-terraform
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
 
# Set the target Azure Kubernetes Service cluster

      - uses: azure/aks-set-context@v1
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          clientId: "*************************"
          clientSecret: "**************************"
          subscriptionId: "1b1b3218-5a2c-44fd-925b-4b9c12f8f380"
          tenantId: "8d1c65ec-cad6-4815-b527-499168d3c31a"

        env:
          REGISTRY_NAME: testregistryvm
          CLUSTER_NAME: example-aks-cluster
          CLUSTER_RESOURCE_GROUP: example-resources
          NAMESPACE: mygradez

# Create namespace if doesn't exist

      - run: |
          kubectl create namespace ${{env.NAMESPACE}} --dry-run -o json | kubectl apply -f -

